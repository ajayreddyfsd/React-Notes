// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

import {
  getAuth,
  signInWithRedirect,
  signInWithPopup,
  GoogleAuthProvider,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
} from "firebase/auth";

// below imports to store the data of the users that signs in using google popup
// getDoc to get the user-data-doc in the users-collection of the firestore-db
// setDoc to newly create the user-data-doc in the users-collection of the firestore-db
import { getFirestore, doc, getDoc, setDoc } from "firebase/firestore";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyBdEVE4TInhcJ8uRDuIemlOApVZaMcODUs",
  authDomain: "crwn-clothing-db-1560c.firebaseapp.com",
  projectId: "crwn-clothing-db-1560c",
  storageBucket: "crwn-clothing-db-1560c.firebasestorage.app",
  messagingSenderId: "1056643990819",
  appId: "1:1056643990819:web:24e9d55d868b8fea56f896",
};

// Initialize Firebase
const firebaseApp = initializeApp(firebaseConfig);

//above is the code generated by my webapp in the firebase project
//how to get it
//create project in the firebase
//then create webapp in it
//click the </> sign
//name and register the webapp
//and u will get the above code
//what it does is imports the iniApp and inis it with the config file customized to our project
//also imports other essential things that we might need in the course of our project

// the below part is for google authentication
// like wise i can put other auths as well like gh, twitter, fb, ....
// const facebookProvider = new FacebookAuthProvider();
// const githubProvider = new GithubAuthProvider();
const provider = new GoogleAuthProvider();

// this is a custom setting to the above inid provider
// which tells to display select account no matter if the user is logged in or not
// for safety, in case using rbrowser with multiple accounts logins
provider.setCustomParameters({
  prompt: "select_account",
});

//initializing the authentication
export const auth = getAuth();

//we are just making this function return itself but with arguments
//the returned function is the one that we imported
//this function when called, opens google sign -in as pop up
//both above inid auth and provider go into this
export const signInWithGooglePopup = () => signInWithPopup(auth, provider);

//same as above but for redirect instead of popup
export const signInWithGoogleRedirect = () =>
  signInWithRedirect(auth, provider);

//below code is for  db-firestore
//below code is for  db-firestore
//below code is for  db-firestore
//below code is for  db-firestore
//below code is for  db-firestore
//below code is for  db-firestore

//this is to instantiate db firestore
export const db = getFirestore();

// the create user code below
// it is basically meant to store user info into the firestoreDB after authentication!
// u see the userAuth as arg, that is the input to that async function,
// it is autmatically gend by firebase once a user successfully signs in

/**
 * Creates a user document in Firestore after authentication.
 * @param {Object} userAuth - Auto-generated by Firebase after successful sign-in.
 * @returns {DocumentReference} Reference to the user's document in Firestore.
 */
export const createUserDocumentFromAuth = async (userAuth, additionalData) => {
  // Safely check if userAuth?.uid exists (returns null if userAuth is undefined/null)
  console.log("userAuth:", userAuth);
  if (!userAuth?.uid) return null; // âœ… Cleaner than explicit checks

  //below code is to fetch the user doc from the firestoreDB if it exists
  //first we make address of the doc using doc()
  //if the doc exists it must exist in this address
  //users is the collection name in which docs go to
  const userDocRef = doc(db, "users", userAuth.uid);
  console.log("userDocRef:", userDocRef);

  //now we get the doc using the address
  const userSnapshot = await getDoc(userDocRef);

  //if user doc doesnt exist, we create doc using the inputs from userAuth
  if (!userSnapshot.exists()) {
    const { displayName, email, phoneNumber, photoURL, uid } = userAuth;
    const createdAt = new Date();

    //storing the above data along with additional data as well into the firestore DB
    try {
      await setDoc(userDocRef, {
        uid,
        displayName,
        email,
        phoneNumber,
        photoURL,
        createdAt,
        ...additionalData,
      });
    } catch (error) {
      console.log("error creating the user", error.message);
    }
  }

  //userDocRef is the specific address of the specific doc inside the firestoreDB
  return userDocRef;
};

//below methods for signup component
//below methods for signup component
//below methods for signup component
//below methods for signup component
//below methods for signup component
//below methods for signup component
//below methods for signup component

//below method is for new users only (or) new signups only
// - Checks if the email already exists in the database.
// - Returns a user object if doesnt exist.
// - Returns an error object if the email is already in the database.
export const createAuthUserWithEmailAndPassword = async (email, password) => {
  if (!email || !password) return;

  return await createUserWithEmailAndPassword(auth, email, password);
};

export const signInAuthUserWithEmailAndPassword = async (email, password) => {
  if (!email || !password) return;

  return await signInWithEmailAndPassword(auth, email, password);
};

export const signOutUser = async () => await signOut(auth);

export const onAuthStateChangedListener = (callback) =>
  onAuthStateChanged(auth, callback);
